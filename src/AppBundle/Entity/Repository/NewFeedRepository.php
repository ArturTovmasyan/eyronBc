<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NewFeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewFeedRepository extends EntityRepository
{
    /**
     * @return array
     */
    public function findUnconvertedLogs()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT le
                           FROM Gedmo\\Loggable\\Entity\\LogEntry le
                           WHERE
                            le.id > (SELECT MAX(l1.id) FROM AppBundle:NewFeed nf1 JOIN nf1.log l1)
                           OR
                            (SELECT COALESCE(MAX(l.id), 0) FROM AppBundle:NewFeed nf JOIN nf.log l) = 0")
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function deleteConvertedLogs()
    {
        $maxLogId = $this->getEntityManager()
            ->createQuery('SELECT COALESCE(MAX(l.id), 0) as maxId
                           FROM AppBundle:NewFeed nf JOIN nf.log l')
            ->getSingleScalarResult();

        return $this->getEntityManager()
            ->createQuery("DELETE FROM Gedmo\Loggable\Entity\LogEntry log
                           WHERE log.id <= :logId")
            ->setParameter('logId', $maxLogId)
            ->execute();
    }

    /**
     * @param $userId
     * @param $getCount
     * @return array
     */
    public function findNewFeed($userId, $getCount = false)
    {
        $goalFriendsIds = $this->getEntityManager()
                               ->getRepository('AppBundle:Goal')->findGoalFriends($userId, true);

        if (!count($goalFriendsIds)){
            $goalFriendsIds[] = 0;
        }

        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('nf, u, g, ss, cmt')
            ->from('AppBundle:NewFeed', 'nf')
            ->join('nf.user', 'u')
            ->join('nf.goal', 'g', 'WITH', 'g.readinessStatus = true')
            ->leftJoin('AppBundle:UserGoal', 'ug', 'WITH', 'ug.user = u AND ug.goal = g')
            ->leftJoin('nf.successStory', 'ss')
            ->leftJoin('nf.comment', 'cmt')
            ->where('u.id IN (:ids) AND (ug IS NULL OR ug.isVisible = true) AND g.publish = TRUE')
            ->orderBy('nf.datetime', 'DESC')
            ->setParameter('ids', $goalFriendsIds);

        if ($getCount){
            return $query->select('count(nf)')
                ->getQuery()
                ->getSingleScalarResult();
        }

        return $query->getQuery()->getResult();
    }

    /**
     * This function is used to get new feed by user id
     *
     * @param $userId
     * @return array
     */
    public function findNewFeedCounts($userId)
    {
        $goalFriendsIds = $this->getEntityManager()
            ->getRepository('AppBundle:Goal')->findGoalFriends($userId, true);
        if (!count($goalFriendsIds)){
            $goalFriendsIds[] = 0;
        }

        return $this->getEntityManager()
            ->createQuery("SELECT count(nf) as counts
                           FROM AppBundle:NewFeed nf
                           JOIN nf.user u
                           JOIN nf.goal g WITH g.readinessStatus = true
                           LEFT JOIN AppBundle:UserGoal ug WITH ug.user = u AND ug.goal = g
                           LEFT JOIN nf.successStory ss
                           LEFT JOIN nf.comment cmt
                           WHERE u.id IN (:ids) AND (ug IS NULL OR ug.isVisible = true)
                           ORDER BY nf.datetime DESC")
            ->setParameter('ids', $goalFriendsIds)
            ->getSingleScalarResult();
    }

    /**
     * @param $userId
     * @return array
     */
    public function findNewFeedByCount($userId)
    {
        $goalFriendsIds = $this->getEntityManager()
                               ->getRepository('AppBundle:Goal')->findGoalFriends($userId, true);
        if (!count($goalFriendsIds)){
            $goalFriendsIds[] = 0;
        }

        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('nf, u, g, ss, cmt')
            ->from('AppBundle:NewFeed', 'nf')
            ->join('nf.goal', 'g', 'WITH', 'g.readinessStatus = true')
            ->join('nf.user', 'u')
            ->leftJoin('AppBundle:UserGoal', 'ug', 'WITH', 'ug.user = u AND ug.goal = g')
            ->leftJoin('nf.successStory', 'ss')
            ->leftJoin('nf.comment','cmt')
            ->where('u.id IN (:ids) AND (ug IS NULL OR ug.isVisible = true)')
            ->andWhere('g.publish = true')
            ->orderBy('nf.datetime', 'DESC')
            ->setParameter('ids', $goalFriendsIds);

        return $query->getQuery()->getResult();
    }

}
