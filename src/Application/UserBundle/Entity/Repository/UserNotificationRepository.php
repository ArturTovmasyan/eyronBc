<?php

namespace Application\UserBundle\Entity\Repository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserNotificationRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $userId
     * @param $first
     * @param $count
     * @param null $lastId
     * @return array
     */
    public function getUserNotifications($userId, $first, $count, $lastId = null)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT un, n
                           FROM ApplicationUserBundle:UserNotification un
                           JOIN un.notification n
                           WHERE un.user = :userId AND (:lastId IS NULL OR (:lastId < 0 AND un.id > -1 * :lastId) OR (:lastId > 0 AND un.id < :lastId))
                           ORDER BY n.created DESC")
            ->setParameter('userId', $userId)
            ->setParameter('lastId', $lastId)
            ->setFirstResult($first)
            ->setMaxResults($count)
            ->getResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function setAsReadAllNotifications($userId)
    {
        return $this->getEntityManager()
            ->createQuery("UPDATE ApplicationUserBundle:UserNotification un
                           SET un.isRead = true
                           WHERE un.user = :userId")
            ->setParameter('userId', $userId)
            ->execute();
    }

    /**
     * @param $id
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findUserNotification($id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT un, n, uns
                           FROM ApplicationUserBundle:UserNotification un
                           JOIN un.notification n
                           LEFT JOIN n.userNotifications uns
                           WHERE un.id = :id")
            ->setParameter('id', $id)
            ->getOneOrNullResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function getUnreadCount($userId)
    {
        return  $this->getEntityManager()
            ->createQuery("SELECT COUNT(un.id)
                           FROM ApplicationUserBundle:UserNotification un
                           WHERE un.user = :userId AND un.isRead = false")
            ->setParameter('userId', $userId)
            ->getSingleScalarResult();
    }
}
