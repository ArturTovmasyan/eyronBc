<?php

namespace Application\CommentBundle\Entity\Repository;

use AppBundle\Model\loggableEntityRepositoryInterface;
use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository implements loggableEntityRepositoryInterface
{
    /**
     * This function is used to get comment by goal(thread) id
     *
     * @param $id
     * @return array
     */
    public function findCommentsByGoalId($id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT c
                           FROM ApplicationCommentBundle:Comment c
                           JOIN c.thread t
                           WHERE t.id  = :id")
            ->setParameter('id', $id)
            ->getResult();
    }

    /**
     * This function is used to get last comment by goal(thread) id
     *
     * @param $id
     * @return array
     */
    public function findLastCommentByGoalId($id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT c.body
                           FROM ApplicationCommentBundle:Comment c
                           JOIN c.thread t
                           WHERE t.id  = :id
                           ORDER BY c.createdAt DESC")
            ->setParameter('id', $id)
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * This function is used to get thread by goal(thread) id
     *
     * @param $id
     * @return array
     */
    public function findThreadByGoalId($id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT tr
                           FROM ApplicationCommentBundle:Thread tr
                           WHERE tr.id  = :id")
            ->setParameter('id', $id)
            ->getResult();
    }

    /**
     * @param $ids
     * @return array|null
     */
    public function findByIdsWithRelations($ids)
    {
        if (!count($ids)){
            return null;
        }

        return $this->getEntityManager()
            ->createQuery("SELECT cmt, author
                           FROM ApplicationCommentBundle:Comment cmt
                           INDEX BY cmt.id
                           JOIN cmt.author author
                           WHERE cmt.id IN (:commentIds)")
            ->setParameter('commentIds', $ids)
            ->getResult();
    }

    /**
     * @param $threadId
     * @return array
     */
    public function findThreadComments($threadId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT cmt, a
                           FROM ApplicationCommentBundle:Comment cmt
                           LEFT JOIN cmt.author a
                           JOIN cmt.thread th WITH th.id = :threadId")
            ->setParameter('threadId', $threadId)
            ->getResult();
    }
}

